const nodemailer = require("nodemailer");
const crypto = require("crypto");

const transporter = nodemailer.createTransport({
    service: "gmail",
    auth: {
        user: "test.adam011@gmail.com",
        pass: process.env.EMAIL_PASS,
    },
    tls: {
        rejectUnauthorized: false,
    },
});

const generateToken = (length = 20) => {
    return crypto.randomBytes(length).toString("hex");
};

const generateOTP = () => {

    const min = 100000; // Minimum value for a 6-digit OTP
    const max = 999999; // Maximum value for a 6-digit OTP
    return Math.floor(Math.random() * (max - min + 1)) + min;


}

const sendVerificationEmail = async (
    recipientEmail,
    token = "",
    type = "default",
    additionParameters = {}
) => {
    let mailOptions = {};

    if (type === "resetPassword") {
        mailOptions = {
            from: "test.adam011@gmail.com",
            to: recipientEmail,
            subject: "Password Reset Request",
            text: `Your OTP is ${token} and  will expire in 2 minutes`,
        };
    } else if (type === "PasswordResetSuccess") {
        mailOptions = {
            from: "test.adam011@gmail.com",
            to: recipientEmail,
            subject: "Password reset successful",
            text: `Your password has been reset`,
        };
    } else if (type === "NameUpdateSuccess") {
        mailOptions = {
            from: "test.adam011@gmail.com",
            to: recipientEmail,
            subject: "Username changed successful",
            text: `Your username has been changed`,
        };
    } else if (type === "autogenerated") {
        // const verficationLink = `http://localhost:5000/user/verify?token=${token}`

        mailOptions = {
            from: "test.adam011@gmail.com",
            to: recipientEmail,
            subject: "Account Created Via Social Platform",
            text: `Your password is ${additionParameters.password}. Please change your password.`,
        };
    } else {
        const verficationLink = `http://localhost:5000/user/verify?token=${token}`;

        mailOptions = {
            from: "test.adam011@gmail.com",
            to: recipientEmail,
            subject: "Verification Email",
            text: `Please click the verification link below to verify your account ${verficationLink}`,
        };
    }

    await new Promise((resolve, reject) => {
        transporter.sendMail(mailOptions, (err, res) => {
            if (err) {
                //console.log(err);
                reject(err);
            } else {
                //console.log(res);
                resolve(res);
            }
        });
    });
};

module.exports = { sendVerificationEmail, generateToken, generateOTP };
